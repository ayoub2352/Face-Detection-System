spring.application.name=surveillance
#This setting tells Hibernate to automatically update the database schema based on your entity mappings.
# If the table person_detection doesn't exist, Hibernate will create it. If it exists but the schema has changed (e.g., new columns or constraints),
# Hibernate will update it.
spring.jpa.hibernate.ddl-auto=update
spring.datasource.url=jdbc:mysql://localhost:3306/surveillance
spring.datasource.username=root
spring.datasource.password=
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.jpa.show-sql= true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect
spring.jpa.open-in-view=false
spring.thymeleaf.enabled=true
spring.thymeleaf.prefix=classpath:/templates/
spring.thymeleaf.suffix=.html


# kafka properties
#spring.kafka.bootstrap-servers=localhost:9092
#spring.kafka.consumer.group-id=surveillance-app
#spring.kafka.consumer.auto-offset-reset=earliest
#spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
#spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer
#spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
#spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer
#spring.kafka.consumer.enable-auto-commit=false
#spring.kafka.listener.ack-mode=MANUAL_IMMEDIATE

# Kafka configurations
spring.kafka.bootstrap-servers=localhost:9092
spring.kafka.consumer.group-id=my-group-id
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.ByteArrayDeserializer
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.ByteArraySerializer
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.listener.ack-mode=record
#spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.ByteArrayDeserializer
#spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.ByteArraySerializer
#spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer
#spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer

# http allowed data size configuration
server.tomcat.max-http-header-size=16384
